# -*- coding: utf-8 -*-
"""0816153_HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14T5vw_KTu8YS0ui1-DPeoLpRyGZUom2F

# Artificial Intelligence - Assignment 1

## 1. Description

In this assignment, you are going to solve the 8-puzzle using any algorithm. The `EightPuzzle` class is written and provided by TAs, you don't need to implement the puzzle yourself, just import and use.

## 2. How to use `EightPuzzle`

```python
from eight_puzzle import EightPuzzle # import

puzzle = EightPuzzle()

puzzle.init()     # initialize a solvable puzzle state
puzzle.init(seed) # initialize a solvable puzzle state using a seed
print(puzzle)     # show current puzzle state

# move
puzzle.move('up')
puzzle.move('down')
puzzle.move('left')
puzzle.move('right')

if puzzle.state == puzzle.FINAL_STATE:
  print('You have solved the puzzle')

# Useful: get the next state after you move in a direction,
# this won't change the internal state if EightPuzzle.
state_after_move_up = puzzle.get_state_after_move(current_state, 'up')

```
"""

# NOTE: PLEASE KEEP THIS CELL NOT MODIFIED!

# download eight_puzzle.py (YOU SHOULD NOT MODIFY eight_puzzle.py)
!wget https://lab.djosix.com/eight_puzzle.py -qO eight_puzzle.py
!sha1sum eight_puzzle.py

from eight_puzzle import EightPuzzle, test

dirs = [ "up", "down", "left", "right" ]
finalState = EightPuzzle()
finalState.init()
finalState = finalState.FINAL_STATE

# print(finalState) 
# (1, 2, 3, 4, 5, 6, 7, 8, 0)

finalPostion = {}
x = 1
y = 1
for i in finalState:
    finalPostion[i] = (x, y)
    y = y + 1
    if y > 3:
        x = x + 1
        y = 1

def calculateHeuristic(puzzle: EightPuzzle) -> int:
    dis_sum = 0
    x = 1
    y = 1
    
    nowState = puzzle.state
    for i in nowState:
        dis_sum += abs(finalPostion[i][0] - x)
        dis_sum += abs(finalPostion[i][1] - y)
        y = y + 1
        if y > 3:
            x = x + 1
            y = 1
        
    return dis_sum

# Test Session
def mytest():
    tmp = EightPuzzle()
    tmp.init()
    
    print(tmp)
    print(calculateHeuristic(tmp))
    
    return

# mytest()

class Node:
    puzzle = None
    steps = 0
    actions = None
    hValue = 0
    
    def __init__(self, puzzle, steps, actions, hValue):
        self.puzzle = puzzle
        self.steps = steps
        self.actions = actions
        self.hValue = hValue

def chooseBestNode(nodes: [Node]) -> Node:
    tmp = 10000000000
    nod = None
    
    for i in nodes:
        now = i.puzzle    
        ss = i.hValue + i.steps
        if ss < tmp:
            nod = i
            tmp = ss
    return nod

import copy

def solve(puzzle: EightPuzzle) -> list:
    ''' 
      Solve the given 8-puzzle and return a list of moves.

      Args:
        puzzle (EightPuzzle): an EightPuzzle object.

      Returns:
        list: a list containing each move direction, for example:
              ['up', 'down', 'left', 'left', ...]
    '''
    pulzs = {}
    nodes = []
    now = Node(puzzle, 0, [], calculateHeuristic(puzzle))
    nodes.append(now)
    
    pulzs[puzzle.state] = 1
    
    ans = []
    max_Size = 20000
    while max_Size >= 0 and len(nodes) > 0:
        max_Size -= 1
        
        now = chooseBestNode(nodes)
        nodes.remove(now)
        
        for i in dirs: 
            tmp = copy.copy(now.puzzle)
            acts = copy.copy(now.actions)
            
            tmp.move(i)
            
            if tmp.state in pulzs:
                continue
            
            pulzs[tmp.state] = 1
            
            acts.append(i)
            if tmp.state == tmp.FINAL_STATE:
                return acts
            
            nowNode = Node(tmp, now.steps + 1, acts, calculateHeuristic(tmp))
            nodes.append(nowNode)
    
    return ans

"""## 4. Test your algorithm"""

tmp = EightPuzzle()
tmp.init()

print(tmp)

print(solve(tmp))

# NOTE: PLEASE KEEP THIS CELL NOT MODIFIED!

results = test(solve, n=10)

"""## 5. Submitting your assignment


1. You have to save 2 files:
  - `XXXXXXX_1.py` (click `"File" > "Download .py"`)
  - `XXXXXXX_1.ipynb` (click `"File" > "Download .ipynb"`)

  where `XXXXXXX` is your student ID.  
2. Compress these 2 files into a `.zip` file named `XXXXXXX_1.zip`.
3. Upload the zip file to E3.


"""

